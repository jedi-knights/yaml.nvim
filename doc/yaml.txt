*yaml.txt*  YAML parsing and encoding for Neovim

==============================================================================
CONTENTS                                                        *yaml-contents*

    1. Introduction ............................ |yaml-introduction|
    2. Setup ................................... |yaml-setup|
    3. Functions ............................... |yaml-functions|
    4. Commands ................................ |yaml-commands|
    5. Examples ................................ |yaml-examples|
    6. License ................................. |yaml-license|

==============================================================================
1. INTRODUCTION                                             *yaml-introduction*

yaml.nvim is a Neovim plugin that provides a full-featured YAML parsing API
for Lua. It allows you to read, write, and manipulate YAML safely inside
Neovim.

Features:
  - Parse YAML strings and files to Lua tables
  - Encode Lua tables to YAML strings
  - Read from and write to YAML files
  - Safely modify YAML files
  - Helper functions for nested value access

==============================================================================
2. SETUP                                                           *yaml-setup*

yaml.setup({config})                                             *yaml.setup()*
    Configure the yaml.nvim plugin.

    Parameters: ~
        {config}  (table, optional) Configuration options
            indent_width (number): Indentation width (default: 2)

    Example: >
        require('yaml').setup({
          indent_width = 2
        })
<

==============================================================================
3. FUNCTIONS                                                   *yaml-functions*

yaml.parse({content})                                            *yaml.parse()*
    Parse a YAML string into a Lua table.

    Parameters: ~
        {content}  (string) The YAML content to parse

    Returns: ~
        table|nil  The parsed YAML as a Lua table, or nil on error
        string|nil Error message if parsing failed

    Example: >
        local yaml = require('yaml')
        local data, err = yaml.parse('name: John\nage: 30')
        if data then
          print(data.name)  -- "John"
        end
<

yaml.read({filepath})                                             *yaml.read()*
    Read and parse a YAML file.

    Parameters: ~
        {filepath}  (string) Path to the YAML file

    Returns: ~
        table|nil  The parsed YAML as a Lua table, or nil on error
        string|nil Error message if reading/parsing failed

    Example: >
        local yaml = require('yaml')
        local data, err = yaml.read('config.yaml')
<

yaml.encode({data}, {options})                                  *yaml.encode()*
    Encode a Lua table to a YAML string.

    Parameters: ~
        {data}     (table) The Lua table to encode
        {options}  (table, optional) Encoding options

    Returns: ~
        string  The YAML string

    Example: >
        local yaml = require('yaml')
        local data = { name = "Jane", age = 25 }
        local yaml_str = yaml.encode(data)
<

yaml.write({filepath}, {data}, {options})                        *yaml.write()*
    Write a Lua table to a YAML file.

    Parameters: ~
        {filepath}  (string) Path to the output file
        {data}      (table) The Lua table to encode
        {options}   (table, optional) Encoding options

    Returns: ~
        boolean    Success status
        string|nil Error message if writing failed

    Example: >
        local yaml = require('yaml')
        local success, err = yaml.write('output.yaml', { version = 1 })
<

yaml.modify({filepath}, {modifier})                             *yaml.modify()*
    Load, modify, and save a YAML file.

    Parameters: ~
        {filepath}  (string) Path to the YAML file
        {modifier}  (function) Function that takes and returns a table

    Returns: ~
        boolean    Success status
        string|nil Error message if operation failed

    Example: >
        local yaml = require('yaml')
        yaml.modify('config.yaml', function(data)
          data.version = 2
          return data
        end)
<

yaml.get({data}, {path})                                           *yaml.get()*
    Safely access nested values using dot notation.

    Parameters: ~
        {data}  (table) The table to query
        {path}  (string) Dot-separated path (e.g., "database.host")

    Returns: ~
        any  The value at the path, or nil if not found

    Example: >
        local yaml = require('yaml')
        local data = { db = { host = "localhost" } }
        local host = yaml.get(data, "db.host")  -- "localhost"
<

yaml.set({data}, {path}, {value})                                  *yaml.set()*
    Safely set nested values using dot notation.

    Parameters: ~
        {data}   (table) The table to modify
        {path}   (string) Dot-separated path (e.g., "database.host")
        {value}  (any) The value to set

    Returns: ~
        table  The modified table

    Example: >
        local yaml = require('yaml')
        local data = {}
        yaml.set(data, "db.host", "localhost")
<

==============================================================================
4. COMMANDS                                                     *yaml-commands*

:YamlParse {yaml_string}                                          *:YamlParse*
    Parse a YAML string and print the result.

    Example: >
        :YamlParse name: John
<

:YamlEncode {lua_table}                                          *:YamlEncode*
    Encode a Lua table to YAML and print the result.

    Example: >
        :YamlEncode {name = "John", age = 30}
<

==============================================================================
5. EXAMPLES                                                     *yaml-examples*

Parse a YAML configuration file: >
    local yaml = require('yaml')
    local config, err = yaml.read(vim.fn.stdpath('config') .. '/settings.yaml')
    if config then
      vim.g.my_setting = config.my_setting
    end
<

Write configuration to YAML: >
    local yaml = require('yaml')
    local config = {
      theme = "dark",
      font_size = 14,
      plugins = { "telescope", "treesitter" }
    }
    yaml.write('config.yaml', config)
<

Update a configuration value: >
    local yaml = require('yaml')
    yaml.modify('config.yaml', function(data)
      data.theme = "light"
      data.updated_at = os.date()
      return data
    end)
<

==============================================================================
6. LICENSE                                                       *yaml-license*

MIT License

==============================================================================
vim:tw=78:ts=8:ft=help:norl: